CREATE TABLE  "COUNTRY" 
   (	"COUNTRY_ID" NUMBER, 
	"COUNTRY_ENAME" VARCHAR2(200), 
	"COUNTRY_ANAME" VARCHAR2(200), 
	 CONSTRAINT "COUNTRY_PK" PRIMARY KEY ("COUNTRY_ID") ENABLE
   )
/
CREATE TABLE  "BANK" 
   (	"BANK_ID" NUMBER, 
	"BANK_CODE" VARCHAR2(50), 
	"BANK_ENAME" VARCHAR2(200), 
	"BANK_ANAME" VARCHAR2(200), 
	"COUNTRY_ID" NUMBER, 
	 CONSTRAINT "BANK_PK" PRIMARY KEY ("BANK_ID") ENABLE
   )
/
CREATE TABLE  "REGION" 
   (	"REGION_ID" NUMBER, 
	"REGION_ENAME" VARCHAR2(500), 
	"REGION_ANAME" VARCHAR2(500), 
	"CITY_ID" NUMBER, 
	 CONSTRAINT "REGION_PK" PRIMARY KEY ("REGION_ID") ENABLE
   )
/
CREATE TABLE  "BANK_BRANCH" 
   (	"BRANCH_ID" NUMBER, 
	"BRANCH_CODE" VARCHAR2(100), 
	"BANK_ID" NUMBER, 
	"BRANCH_ENAME" VARCHAR2(200), 
	"BRANCH_ANAME" VARCHAR2(200), 
	"BRANCH_ADDRESS" VARCHAR2(2000), 
	"BRANCH_PHONE" VARCHAR2(100), 
	"BRANCH_FAX" VARCHAR2(100), 
	"FREEZ_FLAG" NUMBER, 
	"REGION_ID" NUMBER, 
	 CONSTRAINT "BANK_BRANCH_PK" PRIMARY KEY ("BRANCH_ID") ENABLE
   )
/
CREATE TABLE  "CITY" 
   (	"CITY_ID" NUMBER, 
	"CITY_ENAME" VARCHAR2(500), 
	"CITY_ANAME" VARCHAR2(500), 
	"COUNTRY_ID" NUMBER, 
	 CONSTRAINT "CITY_PK" PRIMARY KEY ("CITY_ID") ENABLE
   )
/
CREATE TABLE  "CURRENCY" 
   (	"CURRENCY_ID" NUMBER, 
	"CURRENCY_ENAME" VARCHAR2(100), 
	"CURRENCY_ANAME" VARCHAR2(100), 
	 CONSTRAINT "CURRENCY_PK" PRIMARY KEY ("CURRENCY_ID") ENABLE
   )
/
CREATE TABLE  "CURRENCY_RATE" 
   (	"CURRENCY_RATE_ID" NUMBER, 
	"CURRENCY_FROM" NUMBER, 
	"CURRENCY_TO" NUMBER, 
	"RATE_VALUE" NUMBER, 
	"RATE_DATE" DATE, 
	 CONSTRAINT "CURRENCY_RATE_PK" PRIMARY KEY ("CURRENCY_RATE_ID") ENABLE, 
	 CONSTRAINT "CURRENCY_RATE_UK1" UNIQUE ("RATE_DATE") DISABLE
   )
/
CREATE TABLE  "CUSTOMERS" 
   (	"CUST_ID" NUMBER, 
	"CUST_CODE" VARCHAR2(100), 
	"CUST_ENAME" VARCHAR2(200), 
	"CUST_ANAME" VARCHAR2(200), 
	"CUST_ADDRESS" VARCHAR2(2000), 
	"CUST_PHONE" VARCHAR2(50), 
	"CUST_MOBILE" VARCHAR2(50), 
	"CUST_EMAIL" VARCHAR2(100), 
	"CUST_JOB" VARCHAR2(400), 
	"CUST_TYPE" NUMBER, 
	"FREZ_FLAG" NUMBER, 
	"CUST_PIC" BLOB, 
	"MIMTYPE" VARCHAR2(4000), 
	"FILENAME" VARCHAR2(4000), 
	"FILESIZE" VARCHAR2(4000), 
	"REGION_ID" NUMBER, 
	"ACCOUNT_NET" NUMBER, 
	 CONSTRAINT "CUSTOMERS_PK" PRIMARY KEY ("CUST_ID") ENABLE, 
	 CONSTRAINT "CUSTOMERS_UK1" UNIQUE ("CUST_CODE") ENABLE
   )
/
CREATE TABLE  "CUST_ACCOUNTS" 
   (	"ACC_ID" NUMBER, 
	"ACC_NUMBER" VARCHAR2(200), 
	"BANK_BRANCH_ID" NUMBER, 
	"CUST_ID" NUMBER, 
	"ACC_OPEN_DATE" DATE, 
	"ACC_CURR_ID" NUMBER, 
	"DEPOSIT_OPEN_VAL" NUMBER, 
	"CREATE_USER" NUMBER, 
	 CONSTRAINT "CUST_ACCOUNTS_PK" PRIMARY KEY ("ACC_ID") ENABLE, 
	 CONSTRAINT "CUST_ACCOUNTS_UK1" UNIQUE ("ACC_NUMBER") ENABLE
   )
/
CREATE TABLE  "CUST_DOC" 
   (	"DOC_ID" NUMBER, 
	"CUST_ID" NUMBER, 
	"DOC_DESCR" VARCHAR2(200), 
	"DOC_FILE" BLOB, 
	"MIMTYPE" VARCHAR2(4000), 
	"FILENAME" VARCHAR2(4000), 
	"FILESIZE" VARCHAR2(4000), 
	 CONSTRAINT "CUST_DOC_PK" PRIMARY KEY ("DOC_ID") ENABLE
   )
/
CREATE TABLE  "CUST_TRANS" 
   (	"TRANS_ID" NUMBER, 
	"TRANS_DOC_NO" NUMBER, 
	"TRANS_DATE" DATE, 
	"F_CUST_ACCC" NUMBER, 
	"TO_CUST_ACCC" NUMBER, 
	"TRANS_CURR_ID" NUMBER, 
	"TRANS_VALUE" NUMBER, 
	"CREATE_USER" NUMBER, 
	"F_ACC_BAL_BEF" NUMBER, 
	"TO_ACC_BAL_BEF" NUMBER, 
	 CONSTRAINT "CUST_TRANS_PK" PRIMARY KEY ("TRANS_ID") ENABLE, 
	 CONSTRAINT "CUST_TRANS_UK1" UNIQUE ("TRANS_DOC_NO") ENABLE
   )
/
CREATE TABLE  "CUT_MOV_ACC" 
   (	"MOV_ID" NUMBER, 
	"MOV_NO" NUMBER, 
	"MOV_TYPE" NUMBER, 
	"MOV_DATE" DATE, 
	"CUS_ACC_ID" NUMBER, 
	"MOV_CURR_ID" NUMBER, 
	"MOV_VALUE" NUMBER, 
	"CREATE_USER" NUMBER, 
	"ACC_BAL_BEFORE" NUMBER, 
	 CONSTRAINT "CUT_MOV_ACC_PK" PRIMARY KEY ("MOV_ID") ENABLE, 
	 CONSTRAINT "CUT_MOV_ACC_UK1" UNIQUE ("MOV_NO") ENABLE
   )
/
CREATE TABLE  "DEPT" 
   (	"DEPTNO" NUMBER(2,0), 
	"DNAME" VARCHAR2(14), 
	"LOC" VARCHAR2(13), 
	 PRIMARY KEY ("DEPTNO") ENABLE
   )
/

CREATE TABLE  "EMPLOYEES" 
   (	"EMP_ID" NUMBER, 
	"EMP_CODE" VARCHAR2(100), 
	"EMP_ENAME" VARCHAR2(200), 
	"EMP_ANAME" VARCHAR2(200), 
	"EMP_JOB" VARCHAR2(2000), 
	"EMP_EMAIL" VARCHAR2(200), 
	"EMP_PHONE" VARCHAR2(100), 
	"EMP_BIRTH_DATE" DATE, 
	"EMP_HIRE_DATE" DATE, 
	"EMP_GENDER" NUMBER, 
	"EMP_ADDRESS" VARCHAR2(2000), 
	"EMP_STATUS" NUMBER, 
	"BANK_BRANCH_ID" NUMBER, 
	"REGION_ID" NUMBER, 
	"EMP_PIC" BLOB, 
	"MIMTYPE" VARCHAR2(4000), 
	"FILENAME" VARCHAR2(4000), 
	"FILENSIZE" VARCHAR2(4000), 
	 CONSTRAINT "EMPLOYEES_PK" PRIMARY KEY ("EMP_ID") ENABLE, 
	 CONSTRAINT "EMPLOYEES_UK1" UNIQUE ("EMP_CODE") ENABLE
   )
/
CREATE TABLE  "OPEN_ACC_SETTING" 
   (	"CUST_TYPE" NUMBER, 
	"CURR_ID" NUMBER, 
	"MIN_VALUE" NUMBER, 
	 CONSTRAINT "OPEN_ACC_SETTING_CON" PRIMARY KEY ("CUST_TYPE", "CURR_ID") ENABLE
   )
/
CREATE TABLE  "SYS_TAB" 
   (	"TAB_ID" NUMBER, 
	"TAB_NAME" VARCHAR2(500), 
	 CONSTRAINT "SYS_TAB_PK" PRIMARY KEY ("TAB_ID") ENABLE
   )
/
CREATE TABLE  "SYS_TAB_PAGES" 
   (	"PAGE_ID" NUMBER NOT NULL ENABLE, 
	"PAGE_NAME" VARCHAR2(2000) NOT NULL ENABLE, 
	"TAB_ID" NUMBER, 
	 CONSTRAINT "SYS_TAB_PAGES_PK" PRIMARY KEY ("PAGE_ID") ENABLE
   )
/
CREATE TABLE  "SYS_USERS" 
   (	"USER_ID" NUMBER, 
	"EMP_ID" NUMBER, 
	"CUST_ID" NUMBER, 
	"USER_NAME" VARCHAR2(100), 
	"USER_PASSS" VARCHAR2(100), 
	"USER_ACCESS" NUMBER, 
	"USER_TYPE" NUMBER, 
	"ADMIN_FLAG" NUMBER, 
	 CONSTRAINT "SYS_USERS_PK" PRIMARY KEY ("USER_ID") ENABLE, 
	 CONSTRAINT "SYS_USERS_UK1" UNIQUE ("USER_NAME") ENABLE
   )
/
CREATE TABLE  "SYS_USER_TAB_PAGE_PRIV" 
   (	"PAGE_ID" NUMBER NOT NULL ENABLE, 
	"USER_ID" NUMBER NOT NULL ENABLE, 
	"PRIV_VAL" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT "SYS_USER_TAB_PAGE_PRIV_PK" PRIMARY KEY ("PAGE_ID", "USER_ID") ENABLE
   )
/
CREATE TABLE  "SYS_USER_TAB_PRIV" 
   (	"TAB_ID" NUMBER NOT NULL ENABLE, 
	"USER_ID" NUMBER NOT NULL ENABLE, 
	"PRIV_VAL" NUMBER DEFAULT 1 NOT NULL ENABLE, 
	 CONSTRAINT "SYS_USER_TAB_PRIV_PK" PRIMARY KEY ("TAB_ID", "USER_ID") ENABLE
   )
/
ALTER TABLE  "BANK_BRANCH" ADD CONSTRAINT "BANK_BRANCH_FK" FOREIGN KEY ("BANK_ID")
	  REFERENCES  "BANK" ("BANK_ID") ENABLE
/
ALTER TABLE  "BANK_BRANCH" ADD CONSTRAINT "BANK_BRANCH_FK2" FOREIGN KEY ("REGION_ID")
	  REFERENCES  "REGION" ("REGION_ID") ENABLE
/
ALTER TABLE  "BANK" ADD CONSTRAINT "BANK_CON_2" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES  "COUNTRY" ("COUNTRY_ID") ENABLE
/
ALTER TABLE  "CITY" ADD CONSTRAINT "CITY_FK" FOREIGN KEY ("COUNTRY_ID")
	  REFERENCES  "COUNTRY" ("COUNTRY_ID") ENABLE
/
ALTER TABLE  "CURRENCY_RATE" ADD CONSTRAINT "CURRENCY_RATE_FK" FOREIGN KEY ("CURRENCY_FROM")
	  REFERENCES  "CURRENCY" ("CURRENCY_ID") ENABLE
/
ALTER TABLE  "CURRENCY_RATE" ADD CONSTRAINT "CURRENCY_RATE_FK2" FOREIGN KEY ("CURRENCY_TO")
	  REFERENCES  "CURRENCY" ("CURRENCY_ID") ENABLE
/
ALTER TABLE  "CUSTOMERS" ADD CONSTRAINT "CUSTOMERS_CON_FK2" FOREIGN KEY ("REGION_ID")
	  REFERENCES  "REGION" ("REGION_ID") ENABLE
/
ALTER TABLE  "CUST_ACCOUNTS" ADD CONSTRAINT "CUST_ACCOUNTS_FK" FOREIGN KEY ("BANK_BRANCH_ID")
	  REFERENCES  "BANK_BRANCH" ("BRANCH_ID") ENABLE
/
ALTER TABLE  "CUST_ACCOUNTS" ADD CONSTRAINT "CUST_ACCOUNTS_FK2" FOREIGN KEY ("CUST_ID")
	  REFERENCES  "CUSTOMERS" ("CUST_ID") ENABLE
/
ALTER TABLE  "CUST_ACCOUNTS" ADD CONSTRAINT "CUST_ACCOUNTS_FK3" FOREIGN KEY ("ACC_CURR_ID")
	  REFERENCES  "CURRENCY" ("CURRENCY_ID") ENABLE
/
ALTER TABLE  "CUST_DOC" ADD CONSTRAINT "CUST_DOC_FK" FOREIGN KEY ("CUST_ID")
	  REFERENCES  "CUSTOMERS" ("CUST_ID") ENABLE
/
ALTER TABLE  "CUST_TRANS" ADD CONSTRAINT "CUST_TRANS_FK" FOREIGN KEY ("F_CUST_ACCC")
	  REFERENCES  "CUST_ACCOUNTS" ("ACC_ID") ENABLE
/
ALTER TABLE  "CUST_TRANS" ADD CONSTRAINT "CUST_TRANS_FK2" FOREIGN KEY ("TO_CUST_ACCC")
	  REFERENCES  "CUST_ACCOUNTS" ("ACC_ID") ENABLE
/
ALTER TABLE  "CUST_TRANS" ADD CONSTRAINT "CUST_TRANS_FK3" FOREIGN KEY ("TRANS_CURR_ID")
	  REFERENCES  "CURRENCY" ("CURRENCY_ID") ENABLE
/
ALTER TABLE  "CUT_MOV_ACC" ADD CONSTRAINT "CUT_MOV_ACC_FK" FOREIGN KEY ("CUS_ACC_ID")
	  REFERENCES  "CUST_ACCOUNTS" ("ACC_ID") ENABLE
/
ALTER TABLE  "CUT_MOV_ACC" ADD CONSTRAINT "CUT_MOV_ACC_FK2" FOREIGN KEY ("MOV_CURR_ID")
	  REFERENCES  "CURRENCY" ("CURRENCY_ID") ENABLE
/
ALTER TABLE  "EMPLOYEES" ADD CONSTRAINT "EMPLOYEES_CON_FK2" FOREIGN KEY ("BANK_BRANCH_ID")
	  REFERENCES  "BANK_BRANCH" ("BRANCH_ID") ENABLE
/
ALTER TABLE  "EMPLOYEES" ADD CONSTRAINT "EMPLOYEES_FK" FOREIGN KEY ("REGION_ID")
	  REFERENCES  "REGION" ("REGION_ID") ENABLE
/
ALTER TABLE  "REGION" ADD CONSTRAINT "REGION_FK" FOREIGN KEY ("CITY_ID")
	  REFERENCES  "CITY" ("CITY_ID") ENABLE
/


ALTER TABLE  "SYS_TAB_PAGES" ADD CONSTRAINT "SYS_TAB_PAGES_R01" FOREIGN KEY ("TAB_ID")
	  REFERENCES  "SYS_TAB" ("TAB_ID") ENABLE
/
ALTER TABLE  "SYS_USERS" ADD CONSTRAINT "SYS_USERS_FK" FOREIGN KEY ("EMP_ID")
	  REFERENCES  "EMPLOYEES" ("EMP_ID") ENABLE
/
ALTER TABLE  "SYS_USERS" ADD CONSTRAINT "SYS_USERS_FK2" FOREIGN KEY ("CUST_ID")
	  REFERENCES  "CUSTOMERS" ("CUST_ID") ENABLE
/
ALTER TABLE  "SYS_USER_TAB_PAGE_PRIV" ADD CONSTRAINT "SYS_USER_TAB_PAGE_PRIV_R01" FOREIGN KEY ("PAGE_ID")
	  REFERENCES  "SYS_TAB_PAGES" ("PAGE_ID") ENABLE
/
ALTER TABLE  "SYS_USER_TAB_PAGE_PRIV" ADD CONSTRAINT "SYS_USER_TAB_PAGE_PRIV_R02" FOREIGN KEY ("USER_ID")
	  REFERENCES  "SYS_USERS" ("USER_ID") ENABLE
/
ALTER TABLE  "SYS_USER_TAB_PRIV" ADD CONSTRAINT "SYS_USER_TAB_PRIV_R01" FOREIGN KEY ("TAB_ID")
	  REFERENCES  "SYS_TAB" ("TAB_ID") ENABLE
/
ALTER TABLE  "SYS_USER_TAB_PRIV" ADD CONSTRAINT "SYS_USER_TAB_PRIV_R02" FOREIGN KEY ("USER_ID")
	  REFERENCES  "SYS_USERS" ("USER_ID") ENABLE
/
CREATE OR REPLACE FUNCTION  "GET_USER_TYPE" (P_APP_USER    SYS_USERS.USER_NAME%TYPE)  RETURN NUMBER IS
V_USER_TYPE NUMBER;
BEGIN
SELECT USER_TYPE INTO V_USER_TYPE
FROM SYS_USERS 
WHERE UPPER(USER_NAME)=UPPER(P_APP_USER);
RETURN( V_USER_TYPE);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_USER_TYPE;
/

CREATE OR REPLACE FUNCTION  "GET_USER_ID_ADMIN" (P_USER_ID    SYS_USERS.USER_ID%TYPE)  RETURN NUMBER IS
V_ADMIN_FLAG NUMBER;
BEGIN
SELECT ADMIN_FLAG INTO V_ADMIN_FLAG
FROM SYS_USERS 
WHERE USER_ID =P_USER_ID;

RETURN( V_ADMIN_FLAG);

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_USER_ID_ADMIN;
/

CREATE OR REPLACE FUNCTION  "GET_USER_ID" (P_APP_USER    SYS_USERS.USER_NAME%TYPE)  RETURN NUMBER IS
V_USER_ID NUMBER;
BEGIN
SELECT USER_ID INTO V_USER_ID
FROM SYS_USERS 
WHERE UPPER(USER_NAME)=UPPER(P_APP_USER);

RETURN( V_USER_ID);

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_USER_ID;
/

CREATE OR REPLACE FUNCTION  "GET_USER_CUST_CODE" (P_APP_USER    SYS_USERS.USER_NAME%TYPE)  RETURN CUSTOMERS.CUST_CODE%TYPE IS
V_CUST_CODE CUSTOMERS.CUST_CODE%TYPE;
BEGIN
SELECT CUST_CODE INTO V_CUST_CODE
FROM SYS_USERS S, CUSTOMERS C 
WHERE S.CUST_ID =C.CUST_ID
AND UPPER(USER_NAME)=UPPER(P_APP_USER);

RETURN( V_CUST_CODE);

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_USER_CUST_CODE;
/

CREATE OR REPLACE FUNCTION  "GET_USER_ACTUAL_NAME" (P_USER_ID   NUMBER) RETURN VARCHAR2 IS
V_RET    VARCHAR2(2000 BYTE);
BEGIN
SELECT EMP_ANAME INTO V_RET
FROM SYS_USERS S,EMPLOYEES E
WHERE S.EMP_ID =E.EMP_ID
AND USER_ID =P_USER_ID;
RETURN(V_RET);

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_USER_ACTUAL_NAME;
/

CREATE OR REPLACE FUNCTION  "GET_REGION_NAME" (P_REGION_ID  NUMBER,P_LANG   NUMBER) RETURN REGION.REGION_ANAME%TYPE IS
V_REGION_NAME REGION.REGION_ANAME%TYPE ;
BEGIN
  SELECT DECODE(P_LANG,1,REGION_ANAME,2,REGION_ENAME) INTO V_REGION_NAME
  FROM REGION
  WHERE REGION_ID =P_REGION_ID;
  RETURN(V_REGION_NAME);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_REGION_NAME;
/

CREATE OR REPLACE FUNCTION  "GET_EMPLOYEE_NAME" (P_EMP_ID  NUMBER,P_LANG   NUMBER) RETURN EMPLOYEES.EMP_ANAME%TYPE IS
V_EMP_ANAME EMPLOYEES.EMP_ANAME%TYPE ;
BEGIN
  SELECT DECODE(P_LANG,1,EMP_ANAME,2,EMP_ENAME) INTO V_EMP_ANAME
  FROM EMPLOYEES
  WHERE EMP_ID =P_EMP_ID;
  RETURN(V_EMP_ANAME);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_EMPLOYEE_NAME;
/

CREATE OR REPLACE FUNCTION  "GET_CUSTOMER_NAME" (P_CUST_ID  NUMBER,P_LANG   NUMBER) RETURN CUSTOMERS.CUST_ANAME%TYPE IS
V_CUST_ANAME CUSTOMERS.CUST_ANAME%TYPE ;
BEGIN
  SELECT DECODE(P_LANG,1,CUST_ANAME,2,CUST_ENAME) INTO V_CUST_ANAME
  FROM CUSTOMERS
  WHERE CUST_ID =P_CUST_ID;
  RETURN(V_CUST_ANAME);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_CUSTOMER_NAME;
/

CREATE OR REPLACE FUNCTION  "GET_CURRENCY_NAME" 

(P_CURR_ID  NUMBER,P_LANG   NUMBER)
RETURN CURRENCY.CURRENCY_ANAME%TYPE IS
V_CURR_ANAME CURRENCY.CURRENCY_ANAME%TYPE;
BEGIN
  SELECT DECODE(P_LANG,1,CURRENCY_ANAME,2,CURRENCY_ENAME)
  INTO V_CURR_ANAME
  FROM CURRENCY
  WHERE CURRENCY_ID =P_CURR_ID;
  RETURN(V_CURR_ANAME);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_CURRENCY_NAME;
/

CREATE OR REPLACE FUNCTION  "GET_COUNTRY_NAME" 
(P_COUNTRY_ID  NUMBER,P_LANG   NUMBER) RETURN COUNTRY.COUNTRY_ANAME%TYPE
IS
V_COUNTRY_NAME COUNTRY.COUNTRY_ANAME%TYPE ;
BEGIN
  SELECT DECODE(P_LANG,1,COUNTRY_ENAME,2,COUNTRY_ANAME) INTO V_COUNTRY_NAME
  FROM COUNTRY
  WHERE COUNTRY_ID =P_COUNTRY_ID;
  RETURN(V_COUNTRY_NAME);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_COUNTRY_NAME;
/

CREATE OR REPLACE FUNCTION  "GET_BRANCH_NAME" (P_BRANCH_ID  NUMBER,P_LANG   NUMBER) RETURN BANK_BRANCH.BRANCH_ANAME%TYPE IS
V_BRANCH_NAME BANK_BRANCH.BRANCH_ANAME%TYPE ;
BEGIN
  SELECT DECODE(P_LANG,1,BRANCH_ANAME,2,BRANCH_ENAME) INTO V_BRANCH_NAME
  FROM BANK_BRANCH
  WHERE BRANCH_ID =P_BRANCH_ID;
  RETURN(V_BRANCH_NAME);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_BRANCH_NAME;
/

CREATE OR REPLACE FUNCTION  "GET_BANK_NAME" (P_BANK_ID  NUMBER,P_LANG   NUMBER) RETURN BANK.BANK_ANAME%TYPE IS
V_BANK_NAME BANK.BANK_ANAME%TYPE ;
BEGIN
  SELECT DECODE(P_LANG,1,BANK_ANAME,2,BANK_ENAME) INTO V_BANK_NAME
  FROM BANK
  WHERE BANK_ID =P_BANK_ID;
  RETURN(V_BANK_NAME);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_BANK_NAME;


/

CREATE OR REPLACE FUNCTION  "GET_ACC_BAL" (P_ACC_ID    NUMBER) RETURN NUMBER IS
V_BAL   NUMBER;
BEGIN
SELECT SUM(MOV_VAL) INTO V_BAL
FROM(  
SELECT DEPOSIT_OPEN_VAL MOV_VAL
FROM CUST_ACCOUNTS 
WHERE ACC_ID =P_ACC_ID
UNION ALL
SELECT DECODE(MOV_TYPE,1,-1,2,1)*MOV_VALUE MOV_VAL 
FROM CUT_MOV_ACC 
WHERE CUS_ACC_ID =P_ACC_ID
UNION ALL
SELECT -1 * TRANS_VALUE  MOV_VAL
FROM CUST_TRANS 
WHERE F_CUST_ACCC = P_ACC_ID
UNION ALL
SELECT TRANS_VALUE  MOV_VAL
FROM CUST_TRANS 
WHERE TO_CUST_ACCC =P_ACC_ID);

  RETURN(V_BAL);
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN(NULL);
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END GET_ACC_BAL;
/

CREATE OR REPLACE FUNCTION  "AACU_F" (
p_username IN VARCHAR2,
p_password IN VARCHAR2)
RETURN BOOLEAN IS
BEGIN
FOR c1 IN (SELECT 1
FROM SYS_USERS
WHERE UPPER(USER_NAME) = UPPER(p_username)
and ("USER_ACCESS") = 1
AND UPPER(USER_PASSS) = UPPER(p_password))    
LOOP
RETURN TRUE;
END LOOP;
RETURN FALSE;
END;
/

 CREATE SEQUENCE   "SYS_USERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "REGION_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE
/

 CREATE SEQUENCE   "EMPLOYEES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "DEPT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CUT_MOV_ACC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CUST_TRANS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CUST_DOC_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CUST_ACCOUNTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 121 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CUSTOMERS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CURRENCY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CURRENCY_RATE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "COUNTRY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CITY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "BANK_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "BANK_BRANCH_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
CREATE OR REPLACE TRIGGER  "UPDATE_SYS_USERS" 
  BEFORE UPDATE on "SYS_USERS"               
  for each row
begin   
  IF :OLD.ADMIN_FLAG <> 1 AND :NEW.ADMIN_FLAG =1 THEN 
    DELETE FROM SYS_USER_TAB_PRIV
    WHERE USER_ID =:NEW.USER_ID;
    DELETE FROM SYS_USER_TAB_PAGE_PRIV
    WHERE USER_ID =:NEW.USER_ID;
    END IF;
end;

/
ALTER TRIGGER  "UPDATE_SYS_USERS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_SYS_USERS" 
  before insert on "SYS_USERS"               
  for each row  
begin   
  if :NEW."USER_ID" is null then 
    select "SYS_USERS_SEQ".nextval into :NEW."USER_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_SYS_USERS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_REGION" 
  before insert on "REGION"               
  for each row  
begin   
  if :NEW."REGION_ID" is null then 
    select "REGION_SEQ".nextval into :NEW."REGION_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_REGION" ENABLE
/

CREATE OR REPLACE TRIGGER  "BI_EMPLOYEES" 
  before insert on "EMPLOYEES"               
  for each row  
begin   
  if :NEW."EMP_ID" is null then 
    select "EMPLOYEES_SEQ".nextval into :NEW."EMP_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_EMPLOYEES" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CUT_MOV_ACC" 
  before insert on "CUT_MOV_ACC"               
  for each row  
begin   
  if :NEW."MOV_ID" is null then 
    select "CUT_MOV_ACC_SEQ".nextval into :NEW."MOV_ID" from sys.dual; 
      :NEW.CREATE_USER := GET_USER_ID(V('APP_USER'));
  end if; 
end; 

/
ALTER TRIGGER  "BI_CUT_MOV_ACC" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CUST_TRANS" 
  before insert on "CUST_TRANS"               
  for each row  
begin   
  if :NEW."TRANS_ID" is null then 
    select "CUST_TRANS_SEQ".nextval into :NEW."TRANS_ID" from sys.dual; 
    :NEW.CREATE_USER := GET_USER_ID(V('APP_USER'));
  end if; 
end; 

/
ALTER TRIGGER  "BI_CUST_TRANS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CUST_DOC" 
  before insert on "CUST_DOC"               
  for each row  
begin   
  if :NEW."DOC_ID" is null then 
    select "CUST_DOC_SEQ".nextval into :NEW."DOC_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CUST_DOC" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CUST_ACCOUNTS" 
  before insert on "CUST_ACCOUNTS"               
  for each row  
begin   
  if :NEW."ACC_ID" is null then 
    select "CUST_ACCOUNTS_SEQ".nextval into :NEW."ACC_ID" from sys.dual; 
    :NEW.CREATE_USER := GET_USER_ID(V('APP_USER'));
  end if; 
end; 

/
ALTER TRIGGER  "BI_CUST_ACCOUNTS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CUSTOMERS" 
  before insert on "CUSTOMERS"               
  for each row  
begin   
  if :NEW."CUST_ID" is null then 
    select "CUSTOMERS_SEQ".nextval into :NEW."CUST_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CUSTOMERS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CURRENCY_RATE" 
  before insert on "CURRENCY_RATE"               
  for each row  
begin   
  if :NEW."CURRENCY_RATE_ID" is null then 
    select "CURRENCY_RATE_SEQ".nextval into :NEW."CURRENCY_RATE_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CURRENCY_RATE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CURRENCY" 
  before insert on "CURRENCY"               
  for each row  
begin   
  if :NEW."CURRENCY_ID" is null then 
    select "CURRENCY_SEQ".nextval into :NEW."CURRENCY_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CURRENCY" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_COUNTRY" 
  before insert on "COUNTRY"               
  for each row  
begin   
  if :NEW."COUNTRY_ID" is null then 
    select "COUNTRY_SEQ".nextval into :NEW."COUNTRY_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_COUNTRY" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CITY" 
  before insert on "CITY"               
  for each row  
begin   
  if :NEW."CITY_ID" is null then 
    select "CITY_SEQ".nextval into :NEW."CITY_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CITY" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_BANK_BRANCH" 
  before insert on "BANK_BRANCH"               
  for each row  
begin   
  if :NEW."BRANCH_ID" is null then 
    select "BANK_BRANCH_SEQ".nextval into :NEW."BRANCH_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_BANK_BRANCH" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_BANK" 
  before insert on "BANK"               
  for each row  
begin   
  if :NEW."BANK_ID" is null then 
    select "BANK_SEQ".nextval into :NEW."BANK_ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_BANK" ENABLE
/
CREATE OR REPLACE FORCE VIEW  "CUST_ACC_TRANS_VIEW" ("CUST_CODE", "CUST_ANAME", "ACC_NUMBER", "MOV_NO", "CURRENCY_ANAME", "ACC_BAL_BEFORE", "MOV_VALUE", "ACC_BAL_AFTER", "MOV_DATE", "MOV_DESC") AS 
  SELECT CUST_CODE,CUST_ANAME,ACC_NUMBER,MOV_NO,CURRENCY_ANAME,ACC_BAL_BEFORE,MOV_VALUE,ACC_BAL_AFTER,MOV_DATE,MOV_DESC
FROM (
SELECT CUST_CODE,CUST_ANAME,ACC_NUMBER,NULL MOV_NO,GET_CURRENCY_NAME(ACC_CURR_ID,1) CURRENCY_ANAME,
0 ACC_BAL_BEFORE,DEPOSIT_OPEN_VAL MOV_VALUE, DEPOSIT_OPEN_VAL ACC_BAL_AFTER,
ACC_OPEN_DATE MOV_DATE,'فتح الحساب' MOV_DESC
FROM CUST_ACCOUNTS A,CUSTOMERS C
WHERE A.CUST_ID =C.CUST_ID
UNION ALL
SELECT CUST_CODE,CUST_ANAME,ACC_NUMBER,MOV_NO,GET_CURRENCY_NAME(MOV_CURR_ID,1) CURR_NAME,
ACC_BAL_BEFORE ,MOV_VALUE,(DECODE(MOV_TYPE,1,-1,2,1)*MOV_VALUE)+ACC_BAL_BEFORE ACC_BAL_AFTER,
MOV_DATE,DECODE(MOV_TYPE,1,'سحب','إيداع') MOV_DESC
FROM CUT_MOV_ACC M,CUST_ACCOUNTS A,CUSTOMERS C
WHERE M.CUS_ACC_ID =A.ACC_ID
AND A.CUST_ID =C.CUST_ID
UNION ALL
SELECT CUST_CODE,CUST_ANAME,ACC_NUMBER,TRANS_DOC_NO MOV_NO,GET_CURRENCY_NAME(TRANS_CURR_ID,1) CURR_NAME,
F_ACC_BAL_BEF,TRANS_VALUE MOV_VALUE,(-1*TRANS_VALUE)+F_ACC_BAL_BEF  ACC_BAL_AFTER,     
TRANS_DATE MOV_DATE,'التحويل منه' MOV_DESC
FROM CUST_TRANS T,CUST_ACCOUNTS A,CUSTOMERS C
WHERE T.F_CUST_ACCC =A.ACC_ID 
AND A.CUST_ID =C.CUST_ID
UNION ALL
SELECT CUST_CODE,CUST_ANAME,ACC_NUMBER,TRANS_DOC_NO MOV_NO,GET_CURRENCY_NAME(TRANS_CURR_ID,1) CURR_NAME,
TO_ACC_BAL_BEF,TRANS_VALUE MOV_VALUE,(TRANS_VALUE+TO_ACC_BAL_BEF)  ACC_BAL_AFTER    
,TRANS_DATE MOV_DATE,'التحويل إليه' MOV_DESC
FROM CUST_TRANS T,CUST_ACCOUNTS A,CUSTOMERS C
WHERE T.TO_CUST_ACCC =A.ACC_ID 
AND A.CUST_ID =C.CUST_ID)
/
